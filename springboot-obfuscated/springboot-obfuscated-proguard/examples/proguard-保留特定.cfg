# ProGuard配置文件（proguard.cfg）的完整示例：


# 保留应用的入口点
-keep public class com.example.MyApp {
    public static void main(java.lang.String[]);
}

# 保留特定类的所有成员
-keep class com.example.MyClass {
    *;
}

# 保留特定接口的所有方法
-keep interface com.example.MyInterface {
    public *;
}

# 保留特定注解类
-keep @com.example.MyAnnotation class *

# 保留特定类的构造函数
-keepclassmembers class com.example.MyClass {
    public <init>(...);
}

# 保留特定类的特定方法
-keepclassmembers class com.example.MyClass {
    public void doSomething();
}

# 保留特定类的特定字段
-keepclassmembers class com.example.MyClass {
    public int myField;
}

# 保留特定包及其子包中的所有类和成员
-keep class com.example.** {
    *;
}

# 保留特定类的特定方法参数
-keepclassmembers class com.example.MyClass {
    void myMethod(int);
}

# 保留特定类的特定泛型参数
-keepclassmembers class com.example.MyClass {
    void myMethod(java.util.List);
}

# 保留特定类的特定返回类型
-keepclassmembers class com.example.MyClass {
    java.lang.String myMethod();
}

# 保留特定类的特定异常类型
-keepclassmembers class com.example.MyClass {
    void myMethod() throws com.example.MyException;
}

# 保留特定类的特定注解
-keepclassmembers class com.example.MyClass {
    @com.example.MyAnnotation *;
}

# 保留特定类的特定内部类
-keepclassmembers class com.example.MyClass {
    public class InnerClass;
}

# 保留特定类的特定内部类的所有成员
-keepclassmembers class com.example.MyClass$InnerClass {
    *;
}

# 保留特定类的特定内部类的构造函数
-keepclassmembers class com.example.MyClass$InnerClass {
    public <init>(...);
}

# 保留特定类的特定内部类的特定方法
-keepclassmembers class com.example.MyClass$InnerClass {
    public void innerMethod();
}

# 保留特定类的特定内部类的特定字段
-keepclassmembers class com.example.MyClass$InnerClass {
    public int innerField;
}

# 保留特定类的特定内部类的特定匿名内部类
-keepclassmembers class com.example.MyClass$InnerClass$1 {
    *;
}

# 保留特定类的特定内部类的特定匿名内部类构造函数
-keepclassmembers class com.example.MyClass$InnerClass$1 {
    public <init>(...);
}

# 保留特定类的特定内部类的特定匿名内部类方法
-keepclassmembers class com.example.MyClass$InnerClass$1 {
    public void anonymousMethod();
}

# 保留特定类的特定内部类的特定匿名内部类字段
-keepclassmembers class com.example.MyClass$InnerClass$1 {
    public int anonymousField;
}

# 保留特定包中的所有类和成员，但不混淆它们的名称
-keepnames class com.example.** {
    *;
}

# 保留特定包及其子包中的所有类和成员，但不混淆它们的名称
-keepnames class com.example.** {
    *;
}

# 保留特定类的特定方法的参数名
-keepclassmembernames class com.example.MyClass {
    void myMethod(int);
}

# 保留特定类的特定方法的返回值名
-keepclassmembernames class com.example.MyClass {
    java.lang.String myMethod();
}

# 保留特定类的特定方法的异常类型名
-keepclassmembernames class com.example.MyClass {
    void myMethod() throws com.example.MyException;
}

# 保留特定类的特定字段的名称
-keepclassmembernames class com.example.MyClass {
    public int myField;
}


#以下是一些常见的 ProGuard 配置选项和规则，供您参考：