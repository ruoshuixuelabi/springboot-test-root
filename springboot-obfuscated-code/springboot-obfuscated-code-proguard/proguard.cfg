#JDK目标版本1.8
-target 1.8

#不预校验
#-dontpreverify

#不做压缩
-dontshrink

#不做优化
-dontoptimize

#混淆时不会采用大小写混淆类名，避免Windows不区分大小写情况
-dontusemixedcaseclassnames

#指定不忽略非公共的类
-dontskipnonpubliclibraryclasses

#指定不忽略包可见的库类的成员
-dontskipnonpubliclibraryclassmembers

#保持目录结构：保留目录entry，避免com.example.Myclass.class.getResource("")为nu11.
-keepdirectories

#不混淆所有包名
-keeppackagenames

#保留所有参数的名字：避免controller/mapper映射时找不到对应的参数
-keepparameternames

#为每个类成员生成唯一的名称
#-useuniqueclassmembernames

#保留类名字符串的原始形式，以避免与其他类的名称发生冲突
#混清类名之后，对使用CLass.forName("cLassName")之类的地方进行相应替代
#-adaptclassstrings

#保持源码名与行号（异常时有明确的栈信息），注解（默认会过滤掉所有注解，会影响框架的注解）
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,Synthetic,EnclosingMethod

#-keep 选项用于保留指定类或类成员的名称，使其不被混淆。
#-keepnames 选项用于保留类和类成员的名称，使其不被混淆，但不保留其结构信息。
#-keepclassmembers 选项用于保留类成员的名称，包括字段、方法和构造函数。
#-keepclasseswithmembers 选项用于保留包含指定成员的类，并混淆其他类成员。
#-keepattributes 选项用于保留指定的类、类成员或类成员的属性，使其不被删除。

# 保留'main'方法不被混淆，避免项目无法启动，报错找不到主清单属性
# Keep - Applications. Keep all application classes, along with their 'main' methods.
-keepclasseswithmembers public class * {
    public static void main(java.lang.String[]);
}

# 保留所有接口的名称不被混淆
#-keepnames interface **

# 不混淆所有类的set*/get*方法
-keepclassmembers public class *{void set*(***);*** get*();}

# 保护所有实体中的字段名称
-keepclassmembers class * implements java.io.Serializable {*;}

# 保留所有的'注解'不被混淆
-keepattributes *Annotation*
# 保留特定的注解
#-keepattributes com.example.MyAnnotation
# 保留包注解类
-keepattributes Signature

# 同时保留'枚举'不被混淆
# Also keep - Enumerations. Keep the special static methods that are required in
# enumeration classes.
-keepclassmembers enum  * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

# 同时保留'若含有指定注解的成员不重命名'不被混淆
-keepclassmembers class * {
    @org.springframework.boot.context.properties.ConfigurationProperties *;
    @org.springframework.beans.factory.annotation.Value *;
#    @javax.annotation.Resource *;
#    @org.springframework.beans.factory.annotation.Autowired *;
#    @org.springframework.stereotype.Service *;
#    @org.springframework.stereotype.Component *;
#    @org.springframework.context.annotation.Bean *;
#    @org.springframework.scheduling.annotation.Scheduled *;
}

# 同时保留[Servlet类]不被混淆
-keep class * extends javax.servlet.Servlet

# 同时保留[所有的数据库驱动实现类]不被混淆
# Also keep - Database drivers. Keep all implementations of java.sql.Driver.
-keep class * extends java.sql.Driver

# Keep - Native method names. Keep all native class/method names.
-keepclasseswithmembers,includedescriptorclasses,allowshrinking class * {
    native <methods>;
}

# 解决 Spring Boot 遇到一些问题：

# 保留 Spring Boot 相关的类和资源
-keep class org.springframework.boot.** { *; }
-keep interface org.springframework.boot.** { *; }

# 解决 生成后的*-proguard.jar启动时没有注清单属性的问题
#-keepdirectories META-INF
#-keepattributes **MainClass, **Mainfest*

# 解决 Spring AOP 的问题
-keep class org.springframework.aop.** { *; }
-keep interface org.springframework.aop.** { *; }

# 解决 Spring Data 的问题 例如：Spring Data JPA
-keep class org.springframework.data.** { *; }
-keep interface org.springframework.data.** { *; }

# 解决 Spring MVC 的问题
-keep class org.springframework.web.** { *; }
-keep interface org.springframework.web.** { *; }

# 解决 Thymeleaf 的问题
-keep class org.thymeleaf.spring5.** { *; }

# 解决 lib 的问题
#-keep class org.springframework.boot.loader.** { *; }
#-keep class org.springframework.boot.loader.archive.** { *; }
#-keep class org.springframework.boot.loader.data.** { *; }
#-keep class org.springframework.boot.loader.jar.** { *; }
#-keep class org.springframework.boot.loader.jarmode.** { *; }
#-keep class org.springframework.boot.loader.util.** { *; }

# 其他保留规则
# 保留应用中的'特定包'不混淆
#-keep class com.zja.obfuscated.proguard.config.** {*;}
#-keep class com.zja.obfuscated.proguard.controller.** {*;}
#-keep class com.zja.obfuscated.proguard.mapper.** {*;}
#-keep class com.zja.obfuscated.proguard.model.** {*;}
#-keep class com.zja.obfuscated.proguard.service.** {*;}
#-keep class com.zja.obfuscated.proguard.dao.** {*;}
#-keep class com.zja.obfuscated.proguard.util.** {*;}


# 添加自定义混淆字典，让混淆后的代码更难理解，更难破解，另外，可以自定义混淆类的名称：key value

#混淆的字典：用于混淆除类以外的标识符，作用范围：适用于混淆除类以外的标识符，如方法名、字段名等
#-obfuscationdictionary proguard-dictionary.txt
#类名混淆字典：仅适用于混淆类名
#-classobfuscationdictionary proguard-class.txt